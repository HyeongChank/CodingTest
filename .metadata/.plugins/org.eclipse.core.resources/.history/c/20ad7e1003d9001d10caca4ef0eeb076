package test;

import java.util.Scanner;

class Node {
	int data;
	Node left;
	Node right;
	public Node(int data) {
		this.data = data;
		left = right = null;
	}
	public int getData() {
		return data;
	}
	public void setData(int data) {
		this.data = data;
	}
	public Node getLeft() {
		return left;
	}
	public void setLeft(Node left) {
		this.left = left;
	}
	public Node getRight() {
		return right;
	}
	public void setRight(Node right) {
		this.right = right;
	}
	
}
class Tree2 {
	Node root;
	Node p;
	
	public void Add(int element) {
		p = root;
		Node q = null;
		Node temp = new Node(element);
		int mode = 0;
		if (p == null) {			
			root = temp;
			return;
		}
		while (p != null) {
			if (p.data > element) {
				q = p;
				p = p.left;
				mode = 1;
				
			} else if (p.data < element) {
				q = p;
				p = p.right;
				mode = 2;
			} else {
				
			}
		}
		//여기에 
		if ( mode == 1) {
			q.left = temp;
		}
		else {
			q.right = temp;
		}
	}
	public void inorder() {
		print(p);
	}
	public void print(Node p) {
		Node l = p;
		while(l != null) {
			System.out.println(l.getData());
			print(l.getLeft());
		}
		Node right = p;
		while(right != null) {
			System.out.println(right.getData());
			print(right.getRight());
		}
		
	}
}
public class TestBinaryTree {
	
	public static void main(String[] args) {
		
		
		Scanner sc = new Scanner(System.in);
		Tree2 t = new Tree2();
		int element;
		
		while(true) {
			System.out.println("보기선택");
			int num = sc.nextInt();
			switch(num){
				case 1:
					System.out.println("숫자 입력");
					element = sc.nextInt();
					t.Add(element);
					break;
				case 2:
					t.inorder();
					break;
			}

		}
		
		
	}
	
}
