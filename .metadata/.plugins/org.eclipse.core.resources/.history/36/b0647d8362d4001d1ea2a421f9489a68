package test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Bag<T>{
	private T data;
	private List<T> dl = new ArrayList<>();
	public Bag(T data) {
		this.data = data;
	}

	public T getData() {
		return data;
	}

	public void setData(T data) {
		this.data = data;
	}

	void showType() {
		System.out.println("T의 타입은 " + data.getClass().getName());
	}


	public List<T> getDl() {
		return dl;
	}

	public void setDl(List<T> dl) {
		this.dl = dl;
	}
	
}
class Big{}
class Small{}

// Generic 사용하는 이유 : 불필요한 타입 변경 필요 없음. 필요한 타입이 있으면 바로 만들면 됨
public class Generic {

	public static void main(String[] args) {
		Bag<Big> b = new Bag<>(new Big());
		Bag<Small> s = new Bag<>(new Small());
		Bag<Integer> i = new Bag<>(123);
		
		Bag<String> str = new Bag<>("str");
		
		b.showType();
		s.showType();
		i.showType();
		str.showType();
		
		int num = i.getData();
		System.out.println(num);
		
		
		
		
		String sen = str.getData();
		System.out.println(sen);
		List a = new ArrayList<>();
		a.add(1);
		a.add(2);
		List a2 = new ArrayList<>();
		a2.add("a");
		a2.add("b");
		
		Bag<List<Integer>> il = new Bag<>(a);
		Bag<List<String>> il2 = new Bag<>(a2);
		il.showType();
		il2.showType();
		
		List z = il.getData();
		List zx = il2.getData();
		System.out.println(z);
		System.out.println(zx);

	}


}
